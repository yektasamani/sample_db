
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Station
 * 
 */
export type Station = $Result.DefaultSelection<Prisma.$StationPayload>
/**
 * Model Measurment
 * 
 */
export type Measurment = $Result.DefaultSelection<Prisma.$MeasurmentPayload>
/**
 * Model Record
 * 
 */
export type Record = $Result.DefaultSelection<Prisma.$RecordPayload>
/**
 * Model weatherTypes
 * 
 */
export type weatherTypes = $Result.DefaultSelection<Prisma.$weatherTypesPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Stations
 * const stations = await prisma.station.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Stations
   * const stations = await prisma.station.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.station`: Exposes CRUD operations for the **Station** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stations
    * const stations = await prisma.station.findMany()
    * ```
    */
  get station(): Prisma.StationDelegate<ExtArgs>;

  /**
   * `prisma.measurment`: Exposes CRUD operations for the **Measurment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Measurments
    * const measurments = await prisma.measurment.findMany()
    * ```
    */
  get measurment(): Prisma.MeasurmentDelegate<ExtArgs>;

  /**
   * `prisma.record`: Exposes CRUD operations for the **Record** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Records
    * const records = await prisma.record.findMany()
    * ```
    */
  get record(): Prisma.RecordDelegate<ExtArgs>;

  /**
   * `prisma.weatherTypes`: Exposes CRUD operations for the **weatherTypes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeatherTypes
    * const weatherTypes = await prisma.weatherTypes.findMany()
    * ```
    */
  get weatherTypes(): Prisma.weatherTypesDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Station: 'Station',
    Measurment: 'Measurment',
    Record: 'Record',
    weatherTypes: 'weatherTypes',
    Event: 'Event'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "station" | "measurment" | "record" | "weatherTypes" | "event"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Station: {
        payload: Prisma.$StationPayload<ExtArgs>
        fields: Prisma.StationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          findFirst: {
            args: Prisma.StationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          findMany: {
            args: Prisma.StationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>[]
          }
          create: {
            args: Prisma.StationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          createMany: {
            args: Prisma.StationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>[]
          }
          delete: {
            args: Prisma.StationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          update: {
            args: Prisma.StationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          deleteMany: {
            args: Prisma.StationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          aggregate: {
            args: Prisma.StationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStation>
          }
          groupBy: {
            args: Prisma.StationGroupByArgs<ExtArgs>
            result: $Utils.Optional<StationGroupByOutputType>[]
          }
          count: {
            args: Prisma.StationCountArgs<ExtArgs>
            result: $Utils.Optional<StationCountAggregateOutputType> | number
          }
        }
      }
      Measurment: {
        payload: Prisma.$MeasurmentPayload<ExtArgs>
        fields: Prisma.MeasurmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeasurmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeasurmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload>
          }
          findFirst: {
            args: Prisma.MeasurmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeasurmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload>
          }
          findMany: {
            args: Prisma.MeasurmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload>[]
          }
          create: {
            args: Prisma.MeasurmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload>
          }
          createMany: {
            args: Prisma.MeasurmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeasurmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload>[]
          }
          delete: {
            args: Prisma.MeasurmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload>
          }
          update: {
            args: Prisma.MeasurmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload>
          }
          deleteMany: {
            args: Prisma.MeasurmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeasurmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeasurmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurmentPayload>
          }
          aggregate: {
            args: Prisma.MeasurmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeasurment>
          }
          groupBy: {
            args: Prisma.MeasurmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeasurmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeasurmentCountArgs<ExtArgs>
            result: $Utils.Optional<MeasurmentCountAggregateOutputType> | number
          }
        }
      }
      Record: {
        payload: Prisma.$RecordPayload<ExtArgs>
        fields: Prisma.RecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          findFirst: {
            args: Prisma.RecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          findMany: {
            args: Prisma.RecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>[]
          }
          create: {
            args: Prisma.RecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          createMany: {
            args: Prisma.RecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>[]
          }
          delete: {
            args: Prisma.RecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          update: {
            args: Prisma.RecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          deleteMany: {
            args: Prisma.RecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          aggregate: {
            args: Prisma.RecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecord>
          }
          groupBy: {
            args: Prisma.RecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecordCountArgs<ExtArgs>
            result: $Utils.Optional<RecordCountAggregateOutputType> | number
          }
        }
      }
      weatherTypes: {
        payload: Prisma.$weatherTypesPayload<ExtArgs>
        fields: Prisma.weatherTypesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.weatherTypesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.weatherTypesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload>
          }
          findFirst: {
            args: Prisma.weatherTypesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.weatherTypesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload>
          }
          findMany: {
            args: Prisma.weatherTypesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload>[]
          }
          create: {
            args: Prisma.weatherTypesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload>
          }
          createMany: {
            args: Prisma.weatherTypesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.weatherTypesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload>[]
          }
          delete: {
            args: Prisma.weatherTypesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload>
          }
          update: {
            args: Prisma.weatherTypesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload>
          }
          deleteMany: {
            args: Prisma.weatherTypesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.weatherTypesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.weatherTypesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$weatherTypesPayload>
          }
          aggregate: {
            args: Prisma.WeatherTypesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeatherTypes>
          }
          groupBy: {
            args: Prisma.weatherTypesGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeatherTypesGroupByOutputType>[]
          }
          count: {
            args: Prisma.weatherTypesCountArgs<ExtArgs>
            result: $Utils.Optional<WeatherTypesCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StationCountOutputType
   */

  export type StationCountOutputType = {
    events: number
    measurments: number
    weatherRecords: number
  }

  export type StationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | StationCountOutputTypeCountEventsArgs
    measurments?: boolean | StationCountOutputTypeCountMeasurmentsArgs
    weatherRecords?: boolean | StationCountOutputTypeCountWeatherRecordsArgs
  }

  // Custom InputTypes
  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationCountOutputType
     */
    select?: StationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountMeasurmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeasurmentWhereInput
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountWeatherRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordWhereInput
  }


  /**
   * Count Type WeatherTypesCountOutputType
   */

  export type WeatherTypesCountOutputType = {
    events: number
  }

  export type WeatherTypesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | WeatherTypesCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * WeatherTypesCountOutputType without action
   */
  export type WeatherTypesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeatherTypesCountOutputType
     */
    select?: WeatherTypesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WeatherTypesCountOutputType without action
   */
  export type WeatherTypesCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Station
   */

  export type AggregateStation = {
    _count: StationCountAggregateOutputType | null
    _avg: StationAvgAggregateOutputType | null
    _sum: StationSumAggregateOutputType | null
    _min: StationMinAggregateOutputType | null
    _max: StationMaxAggregateOutputType | null
  }

  export type StationAvgAggregateOutputType = {
    id: number | null
  }

  export type StationSumAggregateOutputType = {
    id: number | null
  }

  export type StationMinAggregateOutputType = {
    id: number | null
    name: string | null
    country: string | null
    state: string | null
    createdAt: Date | null
  }

  export type StationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    country: string | null
    state: string | null
    createdAt: Date | null
  }

  export type StationCountAggregateOutputType = {
    id: number
    name: number
    country: number
    state: number
    createdAt: number
    _all: number
  }


  export type StationAvgAggregateInputType = {
    id?: true
  }

  export type StationSumAggregateInputType = {
    id?: true
  }

  export type StationMinAggregateInputType = {
    id?: true
    name?: true
    country?: true
    state?: true
    createdAt?: true
  }

  export type StationMaxAggregateInputType = {
    id?: true
    name?: true
    country?: true
    state?: true
    createdAt?: true
  }

  export type StationCountAggregateInputType = {
    id?: true
    name?: true
    country?: true
    state?: true
    createdAt?: true
    _all?: true
  }

  export type StationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Station to aggregate.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stations
    **/
    _count?: true | StationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StationMaxAggregateInputType
  }

  export type GetStationAggregateType<T extends StationAggregateArgs> = {
        [P in keyof T & keyof AggregateStation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStation[P]>
      : GetScalarType<T[P], AggregateStation[P]>
  }




  export type StationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationWhereInput
    orderBy?: StationOrderByWithAggregationInput | StationOrderByWithAggregationInput[]
    by: StationScalarFieldEnum[] | StationScalarFieldEnum
    having?: StationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StationCountAggregateInputType | true
    _avg?: StationAvgAggregateInputType
    _sum?: StationSumAggregateInputType
    _min?: StationMinAggregateInputType
    _max?: StationMaxAggregateInputType
  }

  export type StationGroupByOutputType = {
    id: number
    name: string
    country: string | null
    state: string | null
    createdAt: Date
    _count: StationCountAggregateOutputType | null
    _avg: StationAvgAggregateOutputType | null
    _sum: StationSumAggregateOutputType | null
    _min: StationMinAggregateOutputType | null
    _max: StationMaxAggregateOutputType | null
  }

  type GetStationGroupByPayload<T extends StationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StationGroupByOutputType[P]>
            : GetScalarType<T[P], StationGroupByOutputType[P]>
        }
      >
    >


  export type StationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    country?: boolean
    state?: boolean
    createdAt?: boolean
    events?: boolean | Station$eventsArgs<ExtArgs>
    measurments?: boolean | Station$measurmentsArgs<ExtArgs>
    weatherRecords?: boolean | Station$weatherRecordsArgs<ExtArgs>
    _count?: boolean | StationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["station"]>

  export type StationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    country?: boolean
    state?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["station"]>

  export type StationSelectScalar = {
    id?: boolean
    name?: boolean
    country?: boolean
    state?: boolean
    createdAt?: boolean
  }

  export type StationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Station$eventsArgs<ExtArgs>
    measurments?: boolean | Station$measurmentsArgs<ExtArgs>
    weatherRecords?: boolean | Station$weatherRecordsArgs<ExtArgs>
    _count?: boolean | StationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Station"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
      measurments: Prisma.$MeasurmentPayload<ExtArgs>[]
      weatherRecords: Prisma.$RecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      country: string | null
      state: string | null
      createdAt: Date
    }, ExtArgs["result"]["station"]>
    composites: {}
  }

  type StationGetPayload<S extends boolean | null | undefined | StationDefaultArgs> = $Result.GetResult<Prisma.$StationPayload, S>

  type StationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StationCountAggregateInputType | true
    }

  export interface StationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Station'], meta: { name: 'Station' } }
    /**
     * Find zero or one Station that matches the filter.
     * @param {StationFindUniqueArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StationFindUniqueArgs>(args: SelectSubset<T, StationFindUniqueArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Station that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StationFindUniqueOrThrowArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StationFindUniqueOrThrowArgs>(args: SelectSubset<T, StationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Station that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindFirstArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StationFindFirstArgs>(args?: SelectSubset<T, StationFindFirstArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Station that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindFirstOrThrowArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StationFindFirstOrThrowArgs>(args?: SelectSubset<T, StationFindFirstOrThrowArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Stations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stations
     * const stations = await prisma.station.findMany()
     * 
     * // Get first 10 Stations
     * const stations = await prisma.station.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stationWithIdOnly = await prisma.station.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StationFindManyArgs>(args?: SelectSubset<T, StationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Station.
     * @param {StationCreateArgs} args - Arguments to create a Station.
     * @example
     * // Create one Station
     * const Station = await prisma.station.create({
     *   data: {
     *     // ... data to create a Station
     *   }
     * })
     * 
     */
    create<T extends StationCreateArgs>(args: SelectSubset<T, StationCreateArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Stations.
     * @param {StationCreateManyArgs} args - Arguments to create many Stations.
     * @example
     * // Create many Stations
     * const station = await prisma.station.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StationCreateManyArgs>(args?: SelectSubset<T, StationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stations and returns the data saved in the database.
     * @param {StationCreateManyAndReturnArgs} args - Arguments to create many Stations.
     * @example
     * // Create many Stations
     * const station = await prisma.station.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stations and only return the `id`
     * const stationWithIdOnly = await prisma.station.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StationCreateManyAndReturnArgs>(args?: SelectSubset<T, StationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Station.
     * @param {StationDeleteArgs} args - Arguments to delete one Station.
     * @example
     * // Delete one Station
     * const Station = await prisma.station.delete({
     *   where: {
     *     // ... filter to delete one Station
     *   }
     * })
     * 
     */
    delete<T extends StationDeleteArgs>(args: SelectSubset<T, StationDeleteArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Station.
     * @param {StationUpdateArgs} args - Arguments to update one Station.
     * @example
     * // Update one Station
     * const station = await prisma.station.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StationUpdateArgs>(args: SelectSubset<T, StationUpdateArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Stations.
     * @param {StationDeleteManyArgs} args - Arguments to filter Stations to delete.
     * @example
     * // Delete a few Stations
     * const { count } = await prisma.station.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StationDeleteManyArgs>(args?: SelectSubset<T, StationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stations
     * const station = await prisma.station.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StationUpdateManyArgs>(args: SelectSubset<T, StationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Station.
     * @param {StationUpsertArgs} args - Arguments to update or create a Station.
     * @example
     * // Update or create a Station
     * const station = await prisma.station.upsert({
     *   create: {
     *     // ... data to create a Station
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Station we want to update
     *   }
     * })
     */
    upsert<T extends StationUpsertArgs>(args: SelectSubset<T, StationUpsertArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationCountArgs} args - Arguments to filter Stations to count.
     * @example
     * // Count the number of Stations
     * const count = await prisma.station.count({
     *   where: {
     *     // ... the filter for the Stations we want to count
     *   }
     * })
    **/
    count<T extends StationCountArgs>(
      args?: Subset<T, StationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Station.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StationAggregateArgs>(args: Subset<T, StationAggregateArgs>): Prisma.PrismaPromise<GetStationAggregateType<T>>

    /**
     * Group by Station.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StationGroupByArgs['orderBy'] }
        : { orderBy?: StationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Station model
   */
  readonly fields: StationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Station.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Station$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Station$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    measurments<T extends Station$measurmentsArgs<ExtArgs> = {}>(args?: Subset<T, Station$measurmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "findMany"> | Null>
    weatherRecords<T extends Station$weatherRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Station$weatherRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Station model
   */ 
  interface StationFieldRefs {
    readonly id: FieldRef<"Station", 'Int'>
    readonly name: FieldRef<"Station", 'String'>
    readonly country: FieldRef<"Station", 'String'>
    readonly state: FieldRef<"Station", 'String'>
    readonly createdAt: FieldRef<"Station", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Station findUnique
   */
  export type StationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station findUniqueOrThrow
   */
  export type StationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station findFirst
   */
  export type StationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station findFirstOrThrow
   */
  export type StationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station findMany
   */
  export type StationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Stations to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station create
   */
  export type StationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The data needed to create a Station.
     */
    data: XOR<StationCreateInput, StationUncheckedCreateInput>
  }

  /**
   * Station createMany
   */
  export type StationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stations.
     */
    data: StationCreateManyInput | StationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Station createManyAndReturn
   */
  export type StationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Stations.
     */
    data: StationCreateManyInput | StationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Station update
   */
  export type StationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The data needed to update a Station.
     */
    data: XOR<StationUpdateInput, StationUncheckedUpdateInput>
    /**
     * Choose, which Station to update.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station updateMany
   */
  export type StationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stations.
     */
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyInput>
    /**
     * Filter which Stations to update
     */
    where?: StationWhereInput
  }

  /**
   * Station upsert
   */
  export type StationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The filter to search for the Station to update in case it exists.
     */
    where: StationWhereUniqueInput
    /**
     * In case the Station found by the `where` argument doesn't exist, create a new Station with this data.
     */
    create: XOR<StationCreateInput, StationUncheckedCreateInput>
    /**
     * In case the Station was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StationUpdateInput, StationUncheckedUpdateInput>
  }

  /**
   * Station delete
   */
  export type StationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter which Station to delete.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station deleteMany
   */
  export type StationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stations to delete
     */
    where?: StationWhereInput
  }

  /**
   * Station.events
   */
  export type Station$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Station.measurments
   */
  export type Station$measurmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    where?: MeasurmentWhereInput
    orderBy?: MeasurmentOrderByWithRelationInput | MeasurmentOrderByWithRelationInput[]
    cursor?: MeasurmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeasurmentScalarFieldEnum | MeasurmentScalarFieldEnum[]
  }

  /**
   * Station.weatherRecords
   */
  export type Station$weatherRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    where?: RecordWhereInput
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    cursor?: RecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecordScalarFieldEnum | RecordScalarFieldEnum[]
  }

  /**
   * Station without action
   */
  export type StationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
  }


  /**
   * Model Measurment
   */

  export type AggregateMeasurment = {
    _count: MeasurmentCountAggregateOutputType | null
    _avg: MeasurmentAvgAggregateOutputType | null
    _sum: MeasurmentSumAggregateOutputType | null
    _min: MeasurmentMinAggregateOutputType | null
    _max: MeasurmentMaxAggregateOutputType | null
  }

  export type MeasurmentAvgAggregateOutputType = {
    id: number | null
    stationId: number | null
  }

  export type MeasurmentSumAggregateOutputType = {
    id: number | null
    stationId: number | null
  }

  export type MeasurmentMinAggregateOutputType = {
    id: number | null
    stationId: number | null
    measurementType: string | null
  }

  export type MeasurmentMaxAggregateOutputType = {
    id: number | null
    stationId: number | null
    measurementType: string | null
  }

  export type MeasurmentCountAggregateOutputType = {
    id: number
    stationId: number
    measurementType: number
    _all: number
  }


  export type MeasurmentAvgAggregateInputType = {
    id?: true
    stationId?: true
  }

  export type MeasurmentSumAggregateInputType = {
    id?: true
    stationId?: true
  }

  export type MeasurmentMinAggregateInputType = {
    id?: true
    stationId?: true
    measurementType?: true
  }

  export type MeasurmentMaxAggregateInputType = {
    id?: true
    stationId?: true
    measurementType?: true
  }

  export type MeasurmentCountAggregateInputType = {
    id?: true
    stationId?: true
    measurementType?: true
    _all?: true
  }

  export type MeasurmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Measurment to aggregate.
     */
    where?: MeasurmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurments to fetch.
     */
    orderBy?: MeasurmentOrderByWithRelationInput | MeasurmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeasurmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Measurments
    **/
    _count?: true | MeasurmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeasurmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeasurmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeasurmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeasurmentMaxAggregateInputType
  }

  export type GetMeasurmentAggregateType<T extends MeasurmentAggregateArgs> = {
        [P in keyof T & keyof AggregateMeasurment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeasurment[P]>
      : GetScalarType<T[P], AggregateMeasurment[P]>
  }




  export type MeasurmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeasurmentWhereInput
    orderBy?: MeasurmentOrderByWithAggregationInput | MeasurmentOrderByWithAggregationInput[]
    by: MeasurmentScalarFieldEnum[] | MeasurmentScalarFieldEnum
    having?: MeasurmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeasurmentCountAggregateInputType | true
    _avg?: MeasurmentAvgAggregateInputType
    _sum?: MeasurmentSumAggregateInputType
    _min?: MeasurmentMinAggregateInputType
    _max?: MeasurmentMaxAggregateInputType
  }

  export type MeasurmentGroupByOutputType = {
    id: number
    stationId: number
    measurementType: string
    _count: MeasurmentCountAggregateOutputType | null
    _avg: MeasurmentAvgAggregateOutputType | null
    _sum: MeasurmentSumAggregateOutputType | null
    _min: MeasurmentMinAggregateOutputType | null
    _max: MeasurmentMaxAggregateOutputType | null
  }

  type GetMeasurmentGroupByPayload<T extends MeasurmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeasurmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeasurmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeasurmentGroupByOutputType[P]>
            : GetScalarType<T[P], MeasurmentGroupByOutputType[P]>
        }
      >
    >


  export type MeasurmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    measurementType?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["measurment"]>

  export type MeasurmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    measurementType?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["measurment"]>

  export type MeasurmentSelectScalar = {
    id?: boolean
    stationId?: boolean
    measurementType?: boolean
  }

  export type MeasurmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type MeasurmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }

  export type $MeasurmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Measurment"
    objects: {
      station: Prisma.$StationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stationId: number
      measurementType: string
    }, ExtArgs["result"]["measurment"]>
    composites: {}
  }

  type MeasurmentGetPayload<S extends boolean | null | undefined | MeasurmentDefaultArgs> = $Result.GetResult<Prisma.$MeasurmentPayload, S>

  type MeasurmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MeasurmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MeasurmentCountAggregateInputType | true
    }

  export interface MeasurmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Measurment'], meta: { name: 'Measurment' } }
    /**
     * Find zero or one Measurment that matches the filter.
     * @param {MeasurmentFindUniqueArgs} args - Arguments to find a Measurment
     * @example
     * // Get one Measurment
     * const measurment = await prisma.measurment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeasurmentFindUniqueArgs>(args: SelectSubset<T, MeasurmentFindUniqueArgs<ExtArgs>>): Prisma__MeasurmentClient<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Measurment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MeasurmentFindUniqueOrThrowArgs} args - Arguments to find a Measurment
     * @example
     * // Get one Measurment
     * const measurment = await prisma.measurment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeasurmentFindUniqueOrThrowArgs>(args: SelectSubset<T, MeasurmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeasurmentClient<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Measurment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurmentFindFirstArgs} args - Arguments to find a Measurment
     * @example
     * // Get one Measurment
     * const measurment = await prisma.measurment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeasurmentFindFirstArgs>(args?: SelectSubset<T, MeasurmentFindFirstArgs<ExtArgs>>): Prisma__MeasurmentClient<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Measurment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurmentFindFirstOrThrowArgs} args - Arguments to find a Measurment
     * @example
     * // Get one Measurment
     * const measurment = await prisma.measurment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeasurmentFindFirstOrThrowArgs>(args?: SelectSubset<T, MeasurmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeasurmentClient<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Measurments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Measurments
     * const measurments = await prisma.measurment.findMany()
     * 
     * // Get first 10 Measurments
     * const measurments = await prisma.measurment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const measurmentWithIdOnly = await prisma.measurment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeasurmentFindManyArgs>(args?: SelectSubset<T, MeasurmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Measurment.
     * @param {MeasurmentCreateArgs} args - Arguments to create a Measurment.
     * @example
     * // Create one Measurment
     * const Measurment = await prisma.measurment.create({
     *   data: {
     *     // ... data to create a Measurment
     *   }
     * })
     * 
     */
    create<T extends MeasurmentCreateArgs>(args: SelectSubset<T, MeasurmentCreateArgs<ExtArgs>>): Prisma__MeasurmentClient<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Measurments.
     * @param {MeasurmentCreateManyArgs} args - Arguments to create many Measurments.
     * @example
     * // Create many Measurments
     * const measurment = await prisma.measurment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeasurmentCreateManyArgs>(args?: SelectSubset<T, MeasurmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Measurments and returns the data saved in the database.
     * @param {MeasurmentCreateManyAndReturnArgs} args - Arguments to create many Measurments.
     * @example
     * // Create many Measurments
     * const measurment = await prisma.measurment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Measurments and only return the `id`
     * const measurmentWithIdOnly = await prisma.measurment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeasurmentCreateManyAndReturnArgs>(args?: SelectSubset<T, MeasurmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Measurment.
     * @param {MeasurmentDeleteArgs} args - Arguments to delete one Measurment.
     * @example
     * // Delete one Measurment
     * const Measurment = await prisma.measurment.delete({
     *   where: {
     *     // ... filter to delete one Measurment
     *   }
     * })
     * 
     */
    delete<T extends MeasurmentDeleteArgs>(args: SelectSubset<T, MeasurmentDeleteArgs<ExtArgs>>): Prisma__MeasurmentClient<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Measurment.
     * @param {MeasurmentUpdateArgs} args - Arguments to update one Measurment.
     * @example
     * // Update one Measurment
     * const measurment = await prisma.measurment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeasurmentUpdateArgs>(args: SelectSubset<T, MeasurmentUpdateArgs<ExtArgs>>): Prisma__MeasurmentClient<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Measurments.
     * @param {MeasurmentDeleteManyArgs} args - Arguments to filter Measurments to delete.
     * @example
     * // Delete a few Measurments
     * const { count } = await prisma.measurment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeasurmentDeleteManyArgs>(args?: SelectSubset<T, MeasurmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Measurments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Measurments
     * const measurment = await prisma.measurment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeasurmentUpdateManyArgs>(args: SelectSubset<T, MeasurmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Measurment.
     * @param {MeasurmentUpsertArgs} args - Arguments to update or create a Measurment.
     * @example
     * // Update or create a Measurment
     * const measurment = await prisma.measurment.upsert({
     *   create: {
     *     // ... data to create a Measurment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Measurment we want to update
     *   }
     * })
     */
    upsert<T extends MeasurmentUpsertArgs>(args: SelectSubset<T, MeasurmentUpsertArgs<ExtArgs>>): Prisma__MeasurmentClient<$Result.GetResult<Prisma.$MeasurmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Measurments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurmentCountArgs} args - Arguments to filter Measurments to count.
     * @example
     * // Count the number of Measurments
     * const count = await prisma.measurment.count({
     *   where: {
     *     // ... the filter for the Measurments we want to count
     *   }
     * })
    **/
    count<T extends MeasurmentCountArgs>(
      args?: Subset<T, MeasurmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeasurmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Measurment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeasurmentAggregateArgs>(args: Subset<T, MeasurmentAggregateArgs>): Prisma.PrismaPromise<GetMeasurmentAggregateType<T>>

    /**
     * Group by Measurment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeasurmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeasurmentGroupByArgs['orderBy'] }
        : { orderBy?: MeasurmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeasurmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeasurmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Measurment model
   */
  readonly fields: MeasurmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Measurment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeasurmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Measurment model
   */ 
  interface MeasurmentFieldRefs {
    readonly id: FieldRef<"Measurment", 'Int'>
    readonly stationId: FieldRef<"Measurment", 'Int'>
    readonly measurementType: FieldRef<"Measurment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Measurment findUnique
   */
  export type MeasurmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * Filter, which Measurment to fetch.
     */
    where: MeasurmentWhereUniqueInput
  }

  /**
   * Measurment findUniqueOrThrow
   */
  export type MeasurmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * Filter, which Measurment to fetch.
     */
    where: MeasurmentWhereUniqueInput
  }

  /**
   * Measurment findFirst
   */
  export type MeasurmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * Filter, which Measurment to fetch.
     */
    where?: MeasurmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurments to fetch.
     */
    orderBy?: MeasurmentOrderByWithRelationInput | MeasurmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Measurments.
     */
    cursor?: MeasurmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Measurments.
     */
    distinct?: MeasurmentScalarFieldEnum | MeasurmentScalarFieldEnum[]
  }

  /**
   * Measurment findFirstOrThrow
   */
  export type MeasurmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * Filter, which Measurment to fetch.
     */
    where?: MeasurmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurments to fetch.
     */
    orderBy?: MeasurmentOrderByWithRelationInput | MeasurmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Measurments.
     */
    cursor?: MeasurmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Measurments.
     */
    distinct?: MeasurmentScalarFieldEnum | MeasurmentScalarFieldEnum[]
  }

  /**
   * Measurment findMany
   */
  export type MeasurmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * Filter, which Measurments to fetch.
     */
    where?: MeasurmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurments to fetch.
     */
    orderBy?: MeasurmentOrderByWithRelationInput | MeasurmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Measurments.
     */
    cursor?: MeasurmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurments.
     */
    skip?: number
    distinct?: MeasurmentScalarFieldEnum | MeasurmentScalarFieldEnum[]
  }

  /**
   * Measurment create
   */
  export type MeasurmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Measurment.
     */
    data: XOR<MeasurmentCreateInput, MeasurmentUncheckedCreateInput>
  }

  /**
   * Measurment createMany
   */
  export type MeasurmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Measurments.
     */
    data: MeasurmentCreateManyInput | MeasurmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Measurment createManyAndReturn
   */
  export type MeasurmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Measurments.
     */
    data: MeasurmentCreateManyInput | MeasurmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Measurment update
   */
  export type MeasurmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Measurment.
     */
    data: XOR<MeasurmentUpdateInput, MeasurmentUncheckedUpdateInput>
    /**
     * Choose, which Measurment to update.
     */
    where: MeasurmentWhereUniqueInput
  }

  /**
   * Measurment updateMany
   */
  export type MeasurmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Measurments.
     */
    data: XOR<MeasurmentUpdateManyMutationInput, MeasurmentUncheckedUpdateManyInput>
    /**
     * Filter which Measurments to update
     */
    where?: MeasurmentWhereInput
  }

  /**
   * Measurment upsert
   */
  export type MeasurmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Measurment to update in case it exists.
     */
    where: MeasurmentWhereUniqueInput
    /**
     * In case the Measurment found by the `where` argument doesn't exist, create a new Measurment with this data.
     */
    create: XOR<MeasurmentCreateInput, MeasurmentUncheckedCreateInput>
    /**
     * In case the Measurment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeasurmentUpdateInput, MeasurmentUncheckedUpdateInput>
  }

  /**
   * Measurment delete
   */
  export type MeasurmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
    /**
     * Filter which Measurment to delete.
     */
    where: MeasurmentWhereUniqueInput
  }

  /**
   * Measurment deleteMany
   */
  export type MeasurmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Measurments to delete
     */
    where?: MeasurmentWhereInput
  }

  /**
   * Measurment without action
   */
  export type MeasurmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurment
     */
    select?: MeasurmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeasurmentInclude<ExtArgs> | null
  }


  /**
   * Model Record
   */

  export type AggregateRecord = {
    _count: RecordCountAggregateOutputType | null
    _avg: RecordAvgAggregateOutputType | null
    _sum: RecordSumAggregateOutputType | null
    _min: RecordMinAggregateOutputType | null
    _max: RecordMaxAggregateOutputType | null
  }

  export type RecordAvgAggregateOutputType = {
    id: number | null
    stationId: number | null
    temperature: number | null
    precipitation: number | null
    humidity: number | null
  }

  export type RecordSumAggregateOutputType = {
    id: number | null
    stationId: number | null
    temperature: number | null
    precipitation: number | null
    humidity: number | null
  }

  export type RecordMinAggregateOutputType = {
    id: number | null
    stationId: number | null
    recordedAt: Date | null
    temperature: number | null
    precipitation: number | null
    humidity: number | null
  }

  export type RecordMaxAggregateOutputType = {
    id: number | null
    stationId: number | null
    recordedAt: Date | null
    temperature: number | null
    precipitation: number | null
    humidity: number | null
  }

  export type RecordCountAggregateOutputType = {
    id: number
    stationId: number
    recordedAt: number
    temperature: number
    precipitation: number
    humidity: number
    _all: number
  }


  export type RecordAvgAggregateInputType = {
    id?: true
    stationId?: true
    temperature?: true
    precipitation?: true
    humidity?: true
  }

  export type RecordSumAggregateInputType = {
    id?: true
    stationId?: true
    temperature?: true
    precipitation?: true
    humidity?: true
  }

  export type RecordMinAggregateInputType = {
    id?: true
    stationId?: true
    recordedAt?: true
    temperature?: true
    precipitation?: true
    humidity?: true
  }

  export type RecordMaxAggregateInputType = {
    id?: true
    stationId?: true
    recordedAt?: true
    temperature?: true
    precipitation?: true
    humidity?: true
  }

  export type RecordCountAggregateInputType = {
    id?: true
    stationId?: true
    recordedAt?: true
    temperature?: true
    precipitation?: true
    humidity?: true
    _all?: true
  }

  export type RecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Record to aggregate.
     */
    where?: RecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Records
    **/
    _count?: true | RecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordMaxAggregateInputType
  }

  export type GetRecordAggregateType<T extends RecordAggregateArgs> = {
        [P in keyof T & keyof AggregateRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecord[P]>
      : GetScalarType<T[P], AggregateRecord[P]>
  }




  export type RecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordWhereInput
    orderBy?: RecordOrderByWithAggregationInput | RecordOrderByWithAggregationInput[]
    by: RecordScalarFieldEnum[] | RecordScalarFieldEnum
    having?: RecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordCountAggregateInputType | true
    _avg?: RecordAvgAggregateInputType
    _sum?: RecordSumAggregateInputType
    _min?: RecordMinAggregateInputType
    _max?: RecordMaxAggregateInputType
  }

  export type RecordGroupByOutputType = {
    id: number
    stationId: number
    recordedAt: Date
    temperature: number | null
    precipitation: number | null
    humidity: number | null
    _count: RecordCountAggregateOutputType | null
    _avg: RecordAvgAggregateOutputType | null
    _sum: RecordSumAggregateOutputType | null
    _min: RecordMinAggregateOutputType | null
    _max: RecordMaxAggregateOutputType | null
  }

  type GetRecordGroupByPayload<T extends RecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordGroupByOutputType[P]>
            : GetScalarType<T[P], RecordGroupByOutputType[P]>
        }
      >
    >


  export type RecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    recordedAt?: boolean
    temperature?: boolean
    precipitation?: boolean
    humidity?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["record"]>

  export type RecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    recordedAt?: boolean
    temperature?: boolean
    precipitation?: boolean
    humidity?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["record"]>

  export type RecordSelectScalar = {
    id?: boolean
    stationId?: boolean
    recordedAt?: boolean
    temperature?: boolean
    precipitation?: boolean
    humidity?: boolean
  }

  export type RecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type RecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }

  export type $RecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Record"
    objects: {
      station: Prisma.$StationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stationId: number
      recordedAt: Date
      temperature: number | null
      precipitation: number | null
      humidity: number | null
    }, ExtArgs["result"]["record"]>
    composites: {}
  }

  type RecordGetPayload<S extends boolean | null | undefined | RecordDefaultArgs> = $Result.GetResult<Prisma.$RecordPayload, S>

  type RecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecordCountAggregateInputType | true
    }

  export interface RecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Record'], meta: { name: 'Record' } }
    /**
     * Find zero or one Record that matches the filter.
     * @param {RecordFindUniqueArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecordFindUniqueArgs>(args: SelectSubset<T, RecordFindUniqueArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Record that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecordFindUniqueOrThrowArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecordFindUniqueOrThrowArgs>(args: SelectSubset<T, RecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Record that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordFindFirstArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecordFindFirstArgs>(args?: SelectSubset<T, RecordFindFirstArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Record that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordFindFirstOrThrowArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecordFindFirstOrThrowArgs>(args?: SelectSubset<T, RecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Records
     * const records = await prisma.record.findMany()
     * 
     * // Get first 10 Records
     * const records = await prisma.record.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recordWithIdOnly = await prisma.record.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecordFindManyArgs>(args?: SelectSubset<T, RecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Record.
     * @param {RecordCreateArgs} args - Arguments to create a Record.
     * @example
     * // Create one Record
     * const Record = await prisma.record.create({
     *   data: {
     *     // ... data to create a Record
     *   }
     * })
     * 
     */
    create<T extends RecordCreateArgs>(args: SelectSubset<T, RecordCreateArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Records.
     * @param {RecordCreateManyArgs} args - Arguments to create many Records.
     * @example
     * // Create many Records
     * const record = await prisma.record.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecordCreateManyArgs>(args?: SelectSubset<T, RecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Records and returns the data saved in the database.
     * @param {RecordCreateManyAndReturnArgs} args - Arguments to create many Records.
     * @example
     * // Create many Records
     * const record = await prisma.record.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Records and only return the `id`
     * const recordWithIdOnly = await prisma.record.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecordCreateManyAndReturnArgs>(args?: SelectSubset<T, RecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Record.
     * @param {RecordDeleteArgs} args - Arguments to delete one Record.
     * @example
     * // Delete one Record
     * const Record = await prisma.record.delete({
     *   where: {
     *     // ... filter to delete one Record
     *   }
     * })
     * 
     */
    delete<T extends RecordDeleteArgs>(args: SelectSubset<T, RecordDeleteArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Record.
     * @param {RecordUpdateArgs} args - Arguments to update one Record.
     * @example
     * // Update one Record
     * const record = await prisma.record.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecordUpdateArgs>(args: SelectSubset<T, RecordUpdateArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Records.
     * @param {RecordDeleteManyArgs} args - Arguments to filter Records to delete.
     * @example
     * // Delete a few Records
     * const { count } = await prisma.record.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecordDeleteManyArgs>(args?: SelectSubset<T, RecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Records
     * const record = await prisma.record.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecordUpdateManyArgs>(args: SelectSubset<T, RecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Record.
     * @param {RecordUpsertArgs} args - Arguments to update or create a Record.
     * @example
     * // Update or create a Record
     * const record = await prisma.record.upsert({
     *   create: {
     *     // ... data to create a Record
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Record we want to update
     *   }
     * })
     */
    upsert<T extends RecordUpsertArgs>(args: SelectSubset<T, RecordUpsertArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordCountArgs} args - Arguments to filter Records to count.
     * @example
     * // Count the number of Records
     * const count = await prisma.record.count({
     *   where: {
     *     // ... the filter for the Records we want to count
     *   }
     * })
    **/
    count<T extends RecordCountArgs>(
      args?: Subset<T, RecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Record.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordAggregateArgs>(args: Subset<T, RecordAggregateArgs>): Prisma.PrismaPromise<GetRecordAggregateType<T>>

    /**
     * Group by Record.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecordGroupByArgs['orderBy'] }
        : { orderBy?: RecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Record model
   */
  readonly fields: RecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Record.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Record model
   */ 
  interface RecordFieldRefs {
    readonly id: FieldRef<"Record", 'Int'>
    readonly stationId: FieldRef<"Record", 'Int'>
    readonly recordedAt: FieldRef<"Record", 'DateTime'>
    readonly temperature: FieldRef<"Record", 'Float'>
    readonly precipitation: FieldRef<"Record", 'Float'>
    readonly humidity: FieldRef<"Record", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Record findUnique
   */
  export type RecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Record to fetch.
     */
    where: RecordWhereUniqueInput
  }

  /**
   * Record findUniqueOrThrow
   */
  export type RecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Record to fetch.
     */
    where: RecordWhereUniqueInput
  }

  /**
   * Record findFirst
   */
  export type RecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Record to fetch.
     */
    where?: RecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Records.
     */
    cursor?: RecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Records.
     */
    distinct?: RecordScalarFieldEnum | RecordScalarFieldEnum[]
  }

  /**
   * Record findFirstOrThrow
   */
  export type RecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Record to fetch.
     */
    where?: RecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Records.
     */
    cursor?: RecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Records.
     */
    distinct?: RecordScalarFieldEnum | RecordScalarFieldEnum[]
  }

  /**
   * Record findMany
   */
  export type RecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Records to fetch.
     */
    where?: RecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Records.
     */
    cursor?: RecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    distinct?: RecordScalarFieldEnum | RecordScalarFieldEnum[]
  }

  /**
   * Record create
   */
  export type RecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * The data needed to create a Record.
     */
    data: XOR<RecordCreateInput, RecordUncheckedCreateInput>
  }

  /**
   * Record createMany
   */
  export type RecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Records.
     */
    data: RecordCreateManyInput | RecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Record createManyAndReturn
   */
  export type RecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Records.
     */
    data: RecordCreateManyInput | RecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Record update
   */
  export type RecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * The data needed to update a Record.
     */
    data: XOR<RecordUpdateInput, RecordUncheckedUpdateInput>
    /**
     * Choose, which Record to update.
     */
    where: RecordWhereUniqueInput
  }

  /**
   * Record updateMany
   */
  export type RecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Records.
     */
    data: XOR<RecordUpdateManyMutationInput, RecordUncheckedUpdateManyInput>
    /**
     * Filter which Records to update
     */
    where?: RecordWhereInput
  }

  /**
   * Record upsert
   */
  export type RecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * The filter to search for the Record to update in case it exists.
     */
    where: RecordWhereUniqueInput
    /**
     * In case the Record found by the `where` argument doesn't exist, create a new Record with this data.
     */
    create: XOR<RecordCreateInput, RecordUncheckedCreateInput>
    /**
     * In case the Record was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecordUpdateInput, RecordUncheckedUpdateInput>
  }

  /**
   * Record delete
   */
  export type RecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter which Record to delete.
     */
    where: RecordWhereUniqueInput
  }

  /**
   * Record deleteMany
   */
  export type RecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Records to delete
     */
    where?: RecordWhereInput
  }

  /**
   * Record without action
   */
  export type RecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
  }


  /**
   * Model weatherTypes
   */

  export type AggregateWeatherTypes = {
    _count: WeatherTypesCountAggregateOutputType | null
    _avg: WeatherTypesAvgAggregateOutputType | null
    _sum: WeatherTypesSumAggregateOutputType | null
    _min: WeatherTypesMinAggregateOutputType | null
    _max: WeatherTypesMaxAggregateOutputType | null
  }

  export type WeatherTypesAvgAggregateOutputType = {
    id: number | null
  }

  export type WeatherTypesSumAggregateOutputType = {
    id: number | null
  }

  export type WeatherTypesMinAggregateOutputType = {
    id: number | null
    typeName: string | null
  }

  export type WeatherTypesMaxAggregateOutputType = {
    id: number | null
    typeName: string | null
  }

  export type WeatherTypesCountAggregateOutputType = {
    id: number
    typeName: number
    _all: number
  }


  export type WeatherTypesAvgAggregateInputType = {
    id?: true
  }

  export type WeatherTypesSumAggregateInputType = {
    id?: true
  }

  export type WeatherTypesMinAggregateInputType = {
    id?: true
    typeName?: true
  }

  export type WeatherTypesMaxAggregateInputType = {
    id?: true
    typeName?: true
  }

  export type WeatherTypesCountAggregateInputType = {
    id?: true
    typeName?: true
    _all?: true
  }

  export type WeatherTypesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which weatherTypes to aggregate.
     */
    where?: weatherTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of weatherTypes to fetch.
     */
    orderBy?: weatherTypesOrderByWithRelationInput | weatherTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: weatherTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` weatherTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` weatherTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned weatherTypes
    **/
    _count?: true | WeatherTypesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeatherTypesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeatherTypesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeatherTypesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeatherTypesMaxAggregateInputType
  }

  export type GetWeatherTypesAggregateType<T extends WeatherTypesAggregateArgs> = {
        [P in keyof T & keyof AggregateWeatherTypes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeatherTypes[P]>
      : GetScalarType<T[P], AggregateWeatherTypes[P]>
  }




  export type weatherTypesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: weatherTypesWhereInput
    orderBy?: weatherTypesOrderByWithAggregationInput | weatherTypesOrderByWithAggregationInput[]
    by: WeatherTypesScalarFieldEnum[] | WeatherTypesScalarFieldEnum
    having?: weatherTypesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeatherTypesCountAggregateInputType | true
    _avg?: WeatherTypesAvgAggregateInputType
    _sum?: WeatherTypesSumAggregateInputType
    _min?: WeatherTypesMinAggregateInputType
    _max?: WeatherTypesMaxAggregateInputType
  }

  export type WeatherTypesGroupByOutputType = {
    id: number
    typeName: string
    _count: WeatherTypesCountAggregateOutputType | null
    _avg: WeatherTypesAvgAggregateOutputType | null
    _sum: WeatherTypesSumAggregateOutputType | null
    _min: WeatherTypesMinAggregateOutputType | null
    _max: WeatherTypesMaxAggregateOutputType | null
  }

  type GetWeatherTypesGroupByPayload<T extends weatherTypesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeatherTypesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeatherTypesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeatherTypesGroupByOutputType[P]>
            : GetScalarType<T[P], WeatherTypesGroupByOutputType[P]>
        }
      >
    >


  export type weatherTypesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeName?: boolean
    events?: boolean | weatherTypes$eventsArgs<ExtArgs>
    _count?: boolean | WeatherTypesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weatherTypes"]>

  export type weatherTypesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeName?: boolean
  }, ExtArgs["result"]["weatherTypes"]>

  export type weatherTypesSelectScalar = {
    id?: boolean
    typeName?: boolean
  }

  export type weatherTypesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | weatherTypes$eventsArgs<ExtArgs>
    _count?: boolean | WeatherTypesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type weatherTypesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $weatherTypesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "weatherTypes"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      typeName: string
    }, ExtArgs["result"]["weatherTypes"]>
    composites: {}
  }

  type weatherTypesGetPayload<S extends boolean | null | undefined | weatherTypesDefaultArgs> = $Result.GetResult<Prisma.$weatherTypesPayload, S>

  type weatherTypesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<weatherTypesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeatherTypesCountAggregateInputType | true
    }

  export interface weatherTypesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['weatherTypes'], meta: { name: 'weatherTypes' } }
    /**
     * Find zero or one WeatherTypes that matches the filter.
     * @param {weatherTypesFindUniqueArgs} args - Arguments to find a WeatherTypes
     * @example
     * // Get one WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends weatherTypesFindUniqueArgs>(args: SelectSubset<T, weatherTypesFindUniqueArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WeatherTypes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {weatherTypesFindUniqueOrThrowArgs} args - Arguments to find a WeatherTypes
     * @example
     * // Get one WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends weatherTypesFindUniqueOrThrowArgs>(args: SelectSubset<T, weatherTypesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WeatherTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weatherTypesFindFirstArgs} args - Arguments to find a WeatherTypes
     * @example
     * // Get one WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends weatherTypesFindFirstArgs>(args?: SelectSubset<T, weatherTypesFindFirstArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WeatherTypes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weatherTypesFindFirstOrThrowArgs} args - Arguments to find a WeatherTypes
     * @example
     * // Get one WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends weatherTypesFindFirstOrThrowArgs>(args?: SelectSubset<T, weatherTypesFindFirstOrThrowArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WeatherTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weatherTypesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.findMany()
     * 
     * // Get first 10 WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weatherTypesWithIdOnly = await prisma.weatherTypes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends weatherTypesFindManyArgs>(args?: SelectSubset<T, weatherTypesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WeatherTypes.
     * @param {weatherTypesCreateArgs} args - Arguments to create a WeatherTypes.
     * @example
     * // Create one WeatherTypes
     * const WeatherTypes = await prisma.weatherTypes.create({
     *   data: {
     *     // ... data to create a WeatherTypes
     *   }
     * })
     * 
     */
    create<T extends weatherTypesCreateArgs>(args: SelectSubset<T, weatherTypesCreateArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WeatherTypes.
     * @param {weatherTypesCreateManyArgs} args - Arguments to create many WeatherTypes.
     * @example
     * // Create many WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends weatherTypesCreateManyArgs>(args?: SelectSubset<T, weatherTypesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WeatherTypes and returns the data saved in the database.
     * @param {weatherTypesCreateManyAndReturnArgs} args - Arguments to create many WeatherTypes.
     * @example
     * // Create many WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WeatherTypes and only return the `id`
     * const weatherTypesWithIdOnly = await prisma.weatherTypes.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends weatherTypesCreateManyAndReturnArgs>(args?: SelectSubset<T, weatherTypesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WeatherTypes.
     * @param {weatherTypesDeleteArgs} args - Arguments to delete one WeatherTypes.
     * @example
     * // Delete one WeatherTypes
     * const WeatherTypes = await prisma.weatherTypes.delete({
     *   where: {
     *     // ... filter to delete one WeatherTypes
     *   }
     * })
     * 
     */
    delete<T extends weatherTypesDeleteArgs>(args: SelectSubset<T, weatherTypesDeleteArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WeatherTypes.
     * @param {weatherTypesUpdateArgs} args - Arguments to update one WeatherTypes.
     * @example
     * // Update one WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends weatherTypesUpdateArgs>(args: SelectSubset<T, weatherTypesUpdateArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WeatherTypes.
     * @param {weatherTypesDeleteManyArgs} args - Arguments to filter WeatherTypes to delete.
     * @example
     * // Delete a few WeatherTypes
     * const { count } = await prisma.weatherTypes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends weatherTypesDeleteManyArgs>(args?: SelectSubset<T, weatherTypesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeatherTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weatherTypesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends weatherTypesUpdateManyArgs>(args: SelectSubset<T, weatherTypesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeatherTypes.
     * @param {weatherTypesUpsertArgs} args - Arguments to update or create a WeatherTypes.
     * @example
     * // Update or create a WeatherTypes
     * const weatherTypes = await prisma.weatherTypes.upsert({
     *   create: {
     *     // ... data to create a WeatherTypes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeatherTypes we want to update
     *   }
     * })
     */
    upsert<T extends weatherTypesUpsertArgs>(args: SelectSubset<T, weatherTypesUpsertArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WeatherTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weatherTypesCountArgs} args - Arguments to filter WeatherTypes to count.
     * @example
     * // Count the number of WeatherTypes
     * const count = await prisma.weatherTypes.count({
     *   where: {
     *     // ... the filter for the WeatherTypes we want to count
     *   }
     * })
    **/
    count<T extends weatherTypesCountArgs>(
      args?: Subset<T, weatherTypesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeatherTypesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeatherTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeatherTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeatherTypesAggregateArgs>(args: Subset<T, WeatherTypesAggregateArgs>): Prisma.PrismaPromise<GetWeatherTypesAggregateType<T>>

    /**
     * Group by WeatherTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {weatherTypesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends weatherTypesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: weatherTypesGroupByArgs['orderBy'] }
        : { orderBy?: weatherTypesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, weatherTypesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeatherTypesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the weatherTypes model
   */
  readonly fields: weatherTypesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for weatherTypes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__weatherTypesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends weatherTypes$eventsArgs<ExtArgs> = {}>(args?: Subset<T, weatherTypes$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the weatherTypes model
   */ 
  interface weatherTypesFieldRefs {
    readonly id: FieldRef<"weatherTypes", 'Int'>
    readonly typeName: FieldRef<"weatherTypes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * weatherTypes findUnique
   */
  export type weatherTypesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * Filter, which weatherTypes to fetch.
     */
    where: weatherTypesWhereUniqueInput
  }

  /**
   * weatherTypes findUniqueOrThrow
   */
  export type weatherTypesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * Filter, which weatherTypes to fetch.
     */
    where: weatherTypesWhereUniqueInput
  }

  /**
   * weatherTypes findFirst
   */
  export type weatherTypesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * Filter, which weatherTypes to fetch.
     */
    where?: weatherTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of weatherTypes to fetch.
     */
    orderBy?: weatherTypesOrderByWithRelationInput | weatherTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for weatherTypes.
     */
    cursor?: weatherTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` weatherTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` weatherTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of weatherTypes.
     */
    distinct?: WeatherTypesScalarFieldEnum | WeatherTypesScalarFieldEnum[]
  }

  /**
   * weatherTypes findFirstOrThrow
   */
  export type weatherTypesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * Filter, which weatherTypes to fetch.
     */
    where?: weatherTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of weatherTypes to fetch.
     */
    orderBy?: weatherTypesOrderByWithRelationInput | weatherTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for weatherTypes.
     */
    cursor?: weatherTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` weatherTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` weatherTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of weatherTypes.
     */
    distinct?: WeatherTypesScalarFieldEnum | WeatherTypesScalarFieldEnum[]
  }

  /**
   * weatherTypes findMany
   */
  export type weatherTypesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * Filter, which weatherTypes to fetch.
     */
    where?: weatherTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of weatherTypes to fetch.
     */
    orderBy?: weatherTypesOrderByWithRelationInput | weatherTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing weatherTypes.
     */
    cursor?: weatherTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` weatherTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` weatherTypes.
     */
    skip?: number
    distinct?: WeatherTypesScalarFieldEnum | WeatherTypesScalarFieldEnum[]
  }

  /**
   * weatherTypes create
   */
  export type weatherTypesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * The data needed to create a weatherTypes.
     */
    data: XOR<weatherTypesCreateInput, weatherTypesUncheckedCreateInput>
  }

  /**
   * weatherTypes createMany
   */
  export type weatherTypesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many weatherTypes.
     */
    data: weatherTypesCreateManyInput | weatherTypesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * weatherTypes createManyAndReturn
   */
  export type weatherTypesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many weatherTypes.
     */
    data: weatherTypesCreateManyInput | weatherTypesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * weatherTypes update
   */
  export type weatherTypesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * The data needed to update a weatherTypes.
     */
    data: XOR<weatherTypesUpdateInput, weatherTypesUncheckedUpdateInput>
    /**
     * Choose, which weatherTypes to update.
     */
    where: weatherTypesWhereUniqueInput
  }

  /**
   * weatherTypes updateMany
   */
  export type weatherTypesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update weatherTypes.
     */
    data: XOR<weatherTypesUpdateManyMutationInput, weatherTypesUncheckedUpdateManyInput>
    /**
     * Filter which weatherTypes to update
     */
    where?: weatherTypesWhereInput
  }

  /**
   * weatherTypes upsert
   */
  export type weatherTypesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * The filter to search for the weatherTypes to update in case it exists.
     */
    where: weatherTypesWhereUniqueInput
    /**
     * In case the weatherTypes found by the `where` argument doesn't exist, create a new weatherTypes with this data.
     */
    create: XOR<weatherTypesCreateInput, weatherTypesUncheckedCreateInput>
    /**
     * In case the weatherTypes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<weatherTypesUpdateInput, weatherTypesUncheckedUpdateInput>
  }

  /**
   * weatherTypes delete
   */
  export type weatherTypesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
    /**
     * Filter which weatherTypes to delete.
     */
    where: weatherTypesWhereUniqueInput
  }

  /**
   * weatherTypes deleteMany
   */
  export type weatherTypesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which weatherTypes to delete
     */
    where?: weatherTypesWhereInput
  }

  /**
   * weatherTypes.events
   */
  export type weatherTypes$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * weatherTypes without action
   */
  export type weatherTypesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the weatherTypes
     */
    select?: weatherTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: weatherTypesInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    stationId: number | null
    weatherId: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    stationId: number | null
    weatherId: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    stationId: number | null
    weatherId: number | null
    date: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    stationId: number | null
    weatherId: number | null
    date: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    stationId: number
    weatherId: number
    date: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    stationId?: true
    weatherId?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    stationId?: true
    weatherId?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    stationId?: true
    weatherId?: true
    date?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    stationId?: true
    weatherId?: true
    date?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    stationId?: true
    weatherId?: true
    date?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    stationId: number
    weatherId: number
    date: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    weatherId?: boolean
    date?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
    weatherTypes?: boolean | weatherTypesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    weatherId?: boolean
    date?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
    weatherTypes?: boolean | weatherTypesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    stationId?: boolean
    weatherId?: boolean
    date?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
    weatherTypes?: boolean | weatherTypesDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
    weatherTypes?: boolean | weatherTypesDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      station: Prisma.$StationPayload<ExtArgs>
      weatherTypes: Prisma.$weatherTypesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stationId: number
      weatherId: number
      date: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    weatherTypes<T extends weatherTypesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, weatherTypesDefaultArgs<ExtArgs>>): Prisma__weatherTypesClient<$Result.GetResult<Prisma.$weatherTypesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly stationId: FieldRef<"Event", 'Int'>
    readonly weatherId: FieldRef<"Event", 'Int'>
    readonly date: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    country: 'country',
    state: 'state',
    createdAt: 'createdAt'
  };

  export type StationScalarFieldEnum = (typeof StationScalarFieldEnum)[keyof typeof StationScalarFieldEnum]


  export const MeasurmentScalarFieldEnum: {
    id: 'id',
    stationId: 'stationId',
    measurementType: 'measurementType'
  };

  export type MeasurmentScalarFieldEnum = (typeof MeasurmentScalarFieldEnum)[keyof typeof MeasurmentScalarFieldEnum]


  export const RecordScalarFieldEnum: {
    id: 'id',
    stationId: 'stationId',
    recordedAt: 'recordedAt',
    temperature: 'temperature',
    precipitation: 'precipitation',
    humidity: 'humidity'
  };

  export type RecordScalarFieldEnum = (typeof RecordScalarFieldEnum)[keyof typeof RecordScalarFieldEnum]


  export const WeatherTypesScalarFieldEnum: {
    id: 'id',
    typeName: 'typeName'
  };

  export type WeatherTypesScalarFieldEnum = (typeof WeatherTypesScalarFieldEnum)[keyof typeof WeatherTypesScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    stationId: 'stationId',
    weatherId: 'weatherId',
    date: 'date'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StationWhereInput = {
    AND?: StationWhereInput | StationWhereInput[]
    OR?: StationWhereInput[]
    NOT?: StationWhereInput | StationWhereInput[]
    id?: IntFilter<"Station"> | number
    name?: StringFilter<"Station"> | string
    country?: StringNullableFilter<"Station"> | string | null
    state?: StringNullableFilter<"Station"> | string | null
    createdAt?: DateTimeFilter<"Station"> | Date | string
    events?: EventListRelationFilter
    measurments?: MeasurmentListRelationFilter
    weatherRecords?: RecordListRelationFilter
  }

  export type StationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    events?: EventOrderByRelationAggregateInput
    measurments?: MeasurmentOrderByRelationAggregateInput
    weatherRecords?: RecordOrderByRelationAggregateInput
  }

  export type StationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StationWhereInput | StationWhereInput[]
    OR?: StationWhereInput[]
    NOT?: StationWhereInput | StationWhereInput[]
    name?: StringFilter<"Station"> | string
    country?: StringNullableFilter<"Station"> | string | null
    state?: StringNullableFilter<"Station"> | string | null
    createdAt?: DateTimeFilter<"Station"> | Date | string
    events?: EventListRelationFilter
    measurments?: MeasurmentListRelationFilter
    weatherRecords?: RecordListRelationFilter
  }, "id">

  export type StationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StationCountOrderByAggregateInput
    _avg?: StationAvgOrderByAggregateInput
    _max?: StationMaxOrderByAggregateInput
    _min?: StationMinOrderByAggregateInput
    _sum?: StationSumOrderByAggregateInput
  }

  export type StationScalarWhereWithAggregatesInput = {
    AND?: StationScalarWhereWithAggregatesInput | StationScalarWhereWithAggregatesInput[]
    OR?: StationScalarWhereWithAggregatesInput[]
    NOT?: StationScalarWhereWithAggregatesInput | StationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Station"> | number
    name?: StringWithAggregatesFilter<"Station"> | string
    country?: StringNullableWithAggregatesFilter<"Station"> | string | null
    state?: StringNullableWithAggregatesFilter<"Station"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Station"> | Date | string
  }

  export type MeasurmentWhereInput = {
    AND?: MeasurmentWhereInput | MeasurmentWhereInput[]
    OR?: MeasurmentWhereInput[]
    NOT?: MeasurmentWhereInput | MeasurmentWhereInput[]
    id?: IntFilter<"Measurment"> | number
    stationId?: IntFilter<"Measurment"> | number
    measurementType?: StringFilter<"Measurment"> | string
    station?: XOR<StationRelationFilter, StationWhereInput>
  }

  export type MeasurmentOrderByWithRelationInput = {
    id?: SortOrder
    stationId?: SortOrder
    measurementType?: SortOrder
    station?: StationOrderByWithRelationInput
  }

  export type MeasurmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MeasurmentWhereInput | MeasurmentWhereInput[]
    OR?: MeasurmentWhereInput[]
    NOT?: MeasurmentWhereInput | MeasurmentWhereInput[]
    stationId?: IntFilter<"Measurment"> | number
    measurementType?: StringFilter<"Measurment"> | string
    station?: XOR<StationRelationFilter, StationWhereInput>
  }, "id">

  export type MeasurmentOrderByWithAggregationInput = {
    id?: SortOrder
    stationId?: SortOrder
    measurementType?: SortOrder
    _count?: MeasurmentCountOrderByAggregateInput
    _avg?: MeasurmentAvgOrderByAggregateInput
    _max?: MeasurmentMaxOrderByAggregateInput
    _min?: MeasurmentMinOrderByAggregateInput
    _sum?: MeasurmentSumOrderByAggregateInput
  }

  export type MeasurmentScalarWhereWithAggregatesInput = {
    AND?: MeasurmentScalarWhereWithAggregatesInput | MeasurmentScalarWhereWithAggregatesInput[]
    OR?: MeasurmentScalarWhereWithAggregatesInput[]
    NOT?: MeasurmentScalarWhereWithAggregatesInput | MeasurmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Measurment"> | number
    stationId?: IntWithAggregatesFilter<"Measurment"> | number
    measurementType?: StringWithAggregatesFilter<"Measurment"> | string
  }

  export type RecordWhereInput = {
    AND?: RecordWhereInput | RecordWhereInput[]
    OR?: RecordWhereInput[]
    NOT?: RecordWhereInput | RecordWhereInput[]
    id?: IntFilter<"Record"> | number
    stationId?: IntFilter<"Record"> | number
    recordedAt?: DateTimeFilter<"Record"> | Date | string
    temperature?: FloatNullableFilter<"Record"> | number | null
    precipitation?: FloatNullableFilter<"Record"> | number | null
    humidity?: FloatNullableFilter<"Record"> | number | null
    station?: XOR<StationRelationFilter, StationWhereInput>
  }

  export type RecordOrderByWithRelationInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrderInput | SortOrder
    precipitation?: SortOrderInput | SortOrder
    humidity?: SortOrderInput | SortOrder
    station?: StationOrderByWithRelationInput
  }

  export type RecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RecordWhereInput | RecordWhereInput[]
    OR?: RecordWhereInput[]
    NOT?: RecordWhereInput | RecordWhereInput[]
    stationId?: IntFilter<"Record"> | number
    recordedAt?: DateTimeFilter<"Record"> | Date | string
    temperature?: FloatNullableFilter<"Record"> | number | null
    precipitation?: FloatNullableFilter<"Record"> | number | null
    humidity?: FloatNullableFilter<"Record"> | number | null
    station?: XOR<StationRelationFilter, StationWhereInput>
  }, "id">

  export type RecordOrderByWithAggregationInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrderInput | SortOrder
    precipitation?: SortOrderInput | SortOrder
    humidity?: SortOrderInput | SortOrder
    _count?: RecordCountOrderByAggregateInput
    _avg?: RecordAvgOrderByAggregateInput
    _max?: RecordMaxOrderByAggregateInput
    _min?: RecordMinOrderByAggregateInput
    _sum?: RecordSumOrderByAggregateInput
  }

  export type RecordScalarWhereWithAggregatesInput = {
    AND?: RecordScalarWhereWithAggregatesInput | RecordScalarWhereWithAggregatesInput[]
    OR?: RecordScalarWhereWithAggregatesInput[]
    NOT?: RecordScalarWhereWithAggregatesInput | RecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Record"> | number
    stationId?: IntWithAggregatesFilter<"Record"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"Record"> | Date | string
    temperature?: FloatNullableWithAggregatesFilter<"Record"> | number | null
    precipitation?: FloatNullableWithAggregatesFilter<"Record"> | number | null
    humidity?: FloatNullableWithAggregatesFilter<"Record"> | number | null
  }

  export type weatherTypesWhereInput = {
    AND?: weatherTypesWhereInput | weatherTypesWhereInput[]
    OR?: weatherTypesWhereInput[]
    NOT?: weatherTypesWhereInput | weatherTypesWhereInput[]
    id?: IntFilter<"weatherTypes"> | number
    typeName?: StringFilter<"weatherTypes"> | string
    events?: EventListRelationFilter
  }

  export type weatherTypesOrderByWithRelationInput = {
    id?: SortOrder
    typeName?: SortOrder
    events?: EventOrderByRelationAggregateInput
  }

  export type weatherTypesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    typeName?: string
    AND?: weatherTypesWhereInput | weatherTypesWhereInput[]
    OR?: weatherTypesWhereInput[]
    NOT?: weatherTypesWhereInput | weatherTypesWhereInput[]
    events?: EventListRelationFilter
  }, "id" | "typeName">

  export type weatherTypesOrderByWithAggregationInput = {
    id?: SortOrder
    typeName?: SortOrder
    _count?: weatherTypesCountOrderByAggregateInput
    _avg?: weatherTypesAvgOrderByAggregateInput
    _max?: weatherTypesMaxOrderByAggregateInput
    _min?: weatherTypesMinOrderByAggregateInput
    _sum?: weatherTypesSumOrderByAggregateInput
  }

  export type weatherTypesScalarWhereWithAggregatesInput = {
    AND?: weatherTypesScalarWhereWithAggregatesInput | weatherTypesScalarWhereWithAggregatesInput[]
    OR?: weatherTypesScalarWhereWithAggregatesInput[]
    NOT?: weatherTypesScalarWhereWithAggregatesInput | weatherTypesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"weatherTypes"> | number
    typeName?: StringWithAggregatesFilter<"weatherTypes"> | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    stationId?: IntFilter<"Event"> | number
    weatherId?: IntFilter<"Event"> | number
    date?: DateTimeFilter<"Event"> | Date | string
    station?: XOR<StationRelationFilter, StationWhereInput>
    weatherTypes?: XOR<WeatherTypesRelationFilter, weatherTypesWhereInput>
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    stationId?: SortOrder
    weatherId?: SortOrder
    date?: SortOrder
    station?: StationOrderByWithRelationInput
    weatherTypes?: weatherTypesOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    stationId?: IntFilter<"Event"> | number
    weatherId?: IntFilter<"Event"> | number
    date?: DateTimeFilter<"Event"> | Date | string
    station?: XOR<StationRelationFilter, StationWhereInput>
    weatherTypes?: XOR<WeatherTypesRelationFilter, weatherTypesWhereInput>
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    stationId?: SortOrder
    weatherId?: SortOrder
    date?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    stationId?: IntWithAggregatesFilter<"Event"> | number
    weatherId?: IntWithAggregatesFilter<"Event"> | number
    date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type StationCreateInput = {
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutStationInput
    measurments?: MeasurmentCreateNestedManyWithoutStationInput
    weatherRecords?: RecordCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateInput = {
    id?: number
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutStationInput
    measurments?: MeasurmentUncheckedCreateNestedManyWithoutStationInput
    weatherRecords?: RecordUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutStationNestedInput
    measurments?: MeasurmentUpdateManyWithoutStationNestedInput
    weatherRecords?: RecordUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutStationNestedInput
    measurments?: MeasurmentUncheckedUpdateManyWithoutStationNestedInput
    weatherRecords?: RecordUncheckedUpdateManyWithoutStationNestedInput
  }

  export type StationCreateManyInput = {
    id?: number
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
  }

  export type StationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurmentCreateInput = {
    measurementType: string
    station: StationCreateNestedOneWithoutMeasurmentsInput
  }

  export type MeasurmentUncheckedCreateInput = {
    id?: number
    stationId: number
    measurementType: string
  }

  export type MeasurmentUpdateInput = {
    measurementType?: StringFieldUpdateOperationsInput | string
    station?: StationUpdateOneRequiredWithoutMeasurmentsNestedInput
  }

  export type MeasurmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    measurementType?: StringFieldUpdateOperationsInput | string
  }

  export type MeasurmentCreateManyInput = {
    id?: number
    stationId: number
    measurementType: string
  }

  export type MeasurmentUpdateManyMutationInput = {
    measurementType?: StringFieldUpdateOperationsInput | string
  }

  export type MeasurmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    measurementType?: StringFieldUpdateOperationsInput | string
  }

  export type RecordCreateInput = {
    recordedAt: Date | string
    temperature?: number | null
    precipitation?: number | null
    humidity?: number | null
    station: StationCreateNestedOneWithoutWeatherRecordsInput
  }

  export type RecordUncheckedCreateInput = {
    id?: number
    stationId: number
    recordedAt: Date | string
    temperature?: number | null
    precipitation?: number | null
    humidity?: number | null
  }

  export type RecordUpdateInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitation?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableFloatFieldUpdateOperationsInput | number | null
    station?: StationUpdateOneRequiredWithoutWeatherRecordsNestedInput
  }

  export type RecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitation?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RecordCreateManyInput = {
    id?: number
    stationId: number
    recordedAt: Date | string
    temperature?: number | null
    precipitation?: number | null
    humidity?: number | null
  }

  export type RecordUpdateManyMutationInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitation?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitation?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type weatherTypesCreateInput = {
    typeName: string
    events?: EventCreateNestedManyWithoutWeatherTypesInput
  }

  export type weatherTypesUncheckedCreateInput = {
    id?: number
    typeName: string
    events?: EventUncheckedCreateNestedManyWithoutWeatherTypesInput
  }

  export type weatherTypesUpdateInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    events?: EventUpdateManyWithoutWeatherTypesNestedInput
  }

  export type weatherTypesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutWeatherTypesNestedInput
  }

  export type weatherTypesCreateManyInput = {
    id?: number
    typeName: string
  }

  export type weatherTypesUpdateManyMutationInput = {
    typeName?: StringFieldUpdateOperationsInput | string
  }

  export type weatherTypesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateInput = {
    date: Date | string
    station: StationCreateNestedOneWithoutEventsInput
    weatherTypes: weatherTypesCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    stationId: number
    weatherId: number
    date: Date | string
  }

  export type EventUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    station?: StationUpdateOneRequiredWithoutEventsNestedInput
    weatherTypes?: weatherTypesUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    weatherId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyInput = {
    id?: number
    stationId: number
    weatherId: number
    date: Date | string
  }

  export type EventUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    weatherId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type MeasurmentListRelationFilter = {
    every?: MeasurmentWhereInput
    some?: MeasurmentWhereInput
    none?: MeasurmentWhereInput
  }

  export type RecordListRelationFilter = {
    every?: RecordWhereInput
    some?: RecordWhereInput
    none?: RecordWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeasurmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
  }

  export type StationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
  }

  export type StationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
  }

  export type StationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StationRelationFilter = {
    is?: StationWhereInput
    isNot?: StationWhereInput
  }

  export type MeasurmentCountOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    measurementType?: SortOrder
  }

  export type MeasurmentAvgOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
  }

  export type MeasurmentMaxOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    measurementType?: SortOrder
  }

  export type MeasurmentMinOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    measurementType?: SortOrder
  }

  export type MeasurmentSumOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type RecordCountOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrder
    precipitation?: SortOrder
    humidity?: SortOrder
  }

  export type RecordAvgOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    temperature?: SortOrder
    precipitation?: SortOrder
    humidity?: SortOrder
  }

  export type RecordMaxOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrder
    precipitation?: SortOrder
    humidity?: SortOrder
  }

  export type RecordMinOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrder
    precipitation?: SortOrder
    humidity?: SortOrder
  }

  export type RecordSumOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    temperature?: SortOrder
    precipitation?: SortOrder
    humidity?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type weatherTypesCountOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
  }

  export type weatherTypesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type weatherTypesMaxOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
  }

  export type weatherTypesMinOrderByAggregateInput = {
    id?: SortOrder
    typeName?: SortOrder
  }

  export type weatherTypesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WeatherTypesRelationFilter = {
    is?: weatherTypesWhereInput
    isNot?: weatherTypesWhereInput
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    weatherId?: SortOrder
    date?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    weatherId?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    weatherId?: SortOrder
    date?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    weatherId?: SortOrder
    date?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    weatherId?: SortOrder
  }

  export type EventCreateNestedManyWithoutStationInput = {
    create?: XOR<EventCreateWithoutStationInput, EventUncheckedCreateWithoutStationInput> | EventCreateWithoutStationInput[] | EventUncheckedCreateWithoutStationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutStationInput | EventCreateOrConnectWithoutStationInput[]
    createMany?: EventCreateManyStationInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type MeasurmentCreateNestedManyWithoutStationInput = {
    create?: XOR<MeasurmentCreateWithoutStationInput, MeasurmentUncheckedCreateWithoutStationInput> | MeasurmentCreateWithoutStationInput[] | MeasurmentUncheckedCreateWithoutStationInput[]
    connectOrCreate?: MeasurmentCreateOrConnectWithoutStationInput | MeasurmentCreateOrConnectWithoutStationInput[]
    createMany?: MeasurmentCreateManyStationInputEnvelope
    connect?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
  }

  export type RecordCreateNestedManyWithoutStationInput = {
    create?: XOR<RecordCreateWithoutStationInput, RecordUncheckedCreateWithoutStationInput> | RecordCreateWithoutStationInput[] | RecordUncheckedCreateWithoutStationInput[]
    connectOrCreate?: RecordCreateOrConnectWithoutStationInput | RecordCreateOrConnectWithoutStationInput[]
    createMany?: RecordCreateManyStationInputEnvelope
    connect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<EventCreateWithoutStationInput, EventUncheckedCreateWithoutStationInput> | EventCreateWithoutStationInput[] | EventUncheckedCreateWithoutStationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutStationInput | EventCreateOrConnectWithoutStationInput[]
    createMany?: EventCreateManyStationInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type MeasurmentUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<MeasurmentCreateWithoutStationInput, MeasurmentUncheckedCreateWithoutStationInput> | MeasurmentCreateWithoutStationInput[] | MeasurmentUncheckedCreateWithoutStationInput[]
    connectOrCreate?: MeasurmentCreateOrConnectWithoutStationInput | MeasurmentCreateOrConnectWithoutStationInput[]
    createMany?: MeasurmentCreateManyStationInputEnvelope
    connect?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
  }

  export type RecordUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<RecordCreateWithoutStationInput, RecordUncheckedCreateWithoutStationInput> | RecordCreateWithoutStationInput[] | RecordUncheckedCreateWithoutStationInput[]
    connectOrCreate?: RecordCreateOrConnectWithoutStationInput | RecordCreateOrConnectWithoutStationInput[]
    createMany?: RecordCreateManyStationInputEnvelope
    connect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EventUpdateManyWithoutStationNestedInput = {
    create?: XOR<EventCreateWithoutStationInput, EventUncheckedCreateWithoutStationInput> | EventCreateWithoutStationInput[] | EventUncheckedCreateWithoutStationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutStationInput | EventCreateOrConnectWithoutStationInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutStationInput | EventUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: EventCreateManyStationInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutStationInput | EventUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: EventUpdateManyWithWhereWithoutStationInput | EventUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type MeasurmentUpdateManyWithoutStationNestedInput = {
    create?: XOR<MeasurmentCreateWithoutStationInput, MeasurmentUncheckedCreateWithoutStationInput> | MeasurmentCreateWithoutStationInput[] | MeasurmentUncheckedCreateWithoutStationInput[]
    connectOrCreate?: MeasurmentCreateOrConnectWithoutStationInput | MeasurmentCreateOrConnectWithoutStationInput[]
    upsert?: MeasurmentUpsertWithWhereUniqueWithoutStationInput | MeasurmentUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: MeasurmentCreateManyStationInputEnvelope
    set?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
    disconnect?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
    delete?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
    connect?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
    update?: MeasurmentUpdateWithWhereUniqueWithoutStationInput | MeasurmentUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: MeasurmentUpdateManyWithWhereWithoutStationInput | MeasurmentUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: MeasurmentScalarWhereInput | MeasurmentScalarWhereInput[]
  }

  export type RecordUpdateManyWithoutStationNestedInput = {
    create?: XOR<RecordCreateWithoutStationInput, RecordUncheckedCreateWithoutStationInput> | RecordCreateWithoutStationInput[] | RecordUncheckedCreateWithoutStationInput[]
    connectOrCreate?: RecordCreateOrConnectWithoutStationInput | RecordCreateOrConnectWithoutStationInput[]
    upsert?: RecordUpsertWithWhereUniqueWithoutStationInput | RecordUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: RecordCreateManyStationInputEnvelope
    set?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    disconnect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    delete?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    connect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    update?: RecordUpdateWithWhereUniqueWithoutStationInput | RecordUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: RecordUpdateManyWithWhereWithoutStationInput | RecordUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: RecordScalarWhereInput | RecordScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<EventCreateWithoutStationInput, EventUncheckedCreateWithoutStationInput> | EventCreateWithoutStationInput[] | EventUncheckedCreateWithoutStationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutStationInput | EventCreateOrConnectWithoutStationInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutStationInput | EventUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: EventCreateManyStationInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutStationInput | EventUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: EventUpdateManyWithWhereWithoutStationInput | EventUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type MeasurmentUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<MeasurmentCreateWithoutStationInput, MeasurmentUncheckedCreateWithoutStationInput> | MeasurmentCreateWithoutStationInput[] | MeasurmentUncheckedCreateWithoutStationInput[]
    connectOrCreate?: MeasurmentCreateOrConnectWithoutStationInput | MeasurmentCreateOrConnectWithoutStationInput[]
    upsert?: MeasurmentUpsertWithWhereUniqueWithoutStationInput | MeasurmentUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: MeasurmentCreateManyStationInputEnvelope
    set?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
    disconnect?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
    delete?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
    connect?: MeasurmentWhereUniqueInput | MeasurmentWhereUniqueInput[]
    update?: MeasurmentUpdateWithWhereUniqueWithoutStationInput | MeasurmentUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: MeasurmentUpdateManyWithWhereWithoutStationInput | MeasurmentUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: MeasurmentScalarWhereInput | MeasurmentScalarWhereInput[]
  }

  export type RecordUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<RecordCreateWithoutStationInput, RecordUncheckedCreateWithoutStationInput> | RecordCreateWithoutStationInput[] | RecordUncheckedCreateWithoutStationInput[]
    connectOrCreate?: RecordCreateOrConnectWithoutStationInput | RecordCreateOrConnectWithoutStationInput[]
    upsert?: RecordUpsertWithWhereUniqueWithoutStationInput | RecordUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: RecordCreateManyStationInputEnvelope
    set?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    disconnect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    delete?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    connect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    update?: RecordUpdateWithWhereUniqueWithoutStationInput | RecordUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: RecordUpdateManyWithWhereWithoutStationInput | RecordUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: RecordScalarWhereInput | RecordScalarWhereInput[]
  }

  export type StationCreateNestedOneWithoutMeasurmentsInput = {
    create?: XOR<StationCreateWithoutMeasurmentsInput, StationUncheckedCreateWithoutMeasurmentsInput>
    connectOrCreate?: StationCreateOrConnectWithoutMeasurmentsInput
    connect?: StationWhereUniqueInput
  }

  export type StationUpdateOneRequiredWithoutMeasurmentsNestedInput = {
    create?: XOR<StationCreateWithoutMeasurmentsInput, StationUncheckedCreateWithoutMeasurmentsInput>
    connectOrCreate?: StationCreateOrConnectWithoutMeasurmentsInput
    upsert?: StationUpsertWithoutMeasurmentsInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutMeasurmentsInput, StationUpdateWithoutMeasurmentsInput>, StationUncheckedUpdateWithoutMeasurmentsInput>
  }

  export type StationCreateNestedOneWithoutWeatherRecordsInput = {
    create?: XOR<StationCreateWithoutWeatherRecordsInput, StationUncheckedCreateWithoutWeatherRecordsInput>
    connectOrCreate?: StationCreateOrConnectWithoutWeatherRecordsInput
    connect?: StationWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StationUpdateOneRequiredWithoutWeatherRecordsNestedInput = {
    create?: XOR<StationCreateWithoutWeatherRecordsInput, StationUncheckedCreateWithoutWeatherRecordsInput>
    connectOrCreate?: StationCreateOrConnectWithoutWeatherRecordsInput
    upsert?: StationUpsertWithoutWeatherRecordsInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutWeatherRecordsInput, StationUpdateWithoutWeatherRecordsInput>, StationUncheckedUpdateWithoutWeatherRecordsInput>
  }

  export type EventCreateNestedManyWithoutWeatherTypesInput = {
    create?: XOR<EventCreateWithoutWeatherTypesInput, EventUncheckedCreateWithoutWeatherTypesInput> | EventCreateWithoutWeatherTypesInput[] | EventUncheckedCreateWithoutWeatherTypesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutWeatherTypesInput | EventCreateOrConnectWithoutWeatherTypesInput[]
    createMany?: EventCreateManyWeatherTypesInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutWeatherTypesInput = {
    create?: XOR<EventCreateWithoutWeatherTypesInput, EventUncheckedCreateWithoutWeatherTypesInput> | EventCreateWithoutWeatherTypesInput[] | EventUncheckedCreateWithoutWeatherTypesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutWeatherTypesInput | EventCreateOrConnectWithoutWeatherTypesInput[]
    createMany?: EventCreateManyWeatherTypesInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUpdateManyWithoutWeatherTypesNestedInput = {
    create?: XOR<EventCreateWithoutWeatherTypesInput, EventUncheckedCreateWithoutWeatherTypesInput> | EventCreateWithoutWeatherTypesInput[] | EventUncheckedCreateWithoutWeatherTypesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutWeatherTypesInput | EventCreateOrConnectWithoutWeatherTypesInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutWeatherTypesInput | EventUpsertWithWhereUniqueWithoutWeatherTypesInput[]
    createMany?: EventCreateManyWeatherTypesInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutWeatherTypesInput | EventUpdateWithWhereUniqueWithoutWeatherTypesInput[]
    updateMany?: EventUpdateManyWithWhereWithoutWeatherTypesInput | EventUpdateManyWithWhereWithoutWeatherTypesInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutWeatherTypesNestedInput = {
    create?: XOR<EventCreateWithoutWeatherTypesInput, EventUncheckedCreateWithoutWeatherTypesInput> | EventCreateWithoutWeatherTypesInput[] | EventUncheckedCreateWithoutWeatherTypesInput[]
    connectOrCreate?: EventCreateOrConnectWithoutWeatherTypesInput | EventCreateOrConnectWithoutWeatherTypesInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutWeatherTypesInput | EventUpsertWithWhereUniqueWithoutWeatherTypesInput[]
    createMany?: EventCreateManyWeatherTypesInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutWeatherTypesInput | EventUpdateWithWhereUniqueWithoutWeatherTypesInput[]
    updateMany?: EventUpdateManyWithWhereWithoutWeatherTypesInput | EventUpdateManyWithWhereWithoutWeatherTypesInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type StationCreateNestedOneWithoutEventsInput = {
    create?: XOR<StationCreateWithoutEventsInput, StationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: StationCreateOrConnectWithoutEventsInput
    connect?: StationWhereUniqueInput
  }

  export type weatherTypesCreateNestedOneWithoutEventsInput = {
    create?: XOR<weatherTypesCreateWithoutEventsInput, weatherTypesUncheckedCreateWithoutEventsInput>
    connectOrCreate?: weatherTypesCreateOrConnectWithoutEventsInput
    connect?: weatherTypesWhereUniqueInput
  }

  export type StationUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<StationCreateWithoutEventsInput, StationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: StationCreateOrConnectWithoutEventsInput
    upsert?: StationUpsertWithoutEventsInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutEventsInput, StationUpdateWithoutEventsInput>, StationUncheckedUpdateWithoutEventsInput>
  }

  export type weatherTypesUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<weatherTypesCreateWithoutEventsInput, weatherTypesUncheckedCreateWithoutEventsInput>
    connectOrCreate?: weatherTypesCreateOrConnectWithoutEventsInput
    upsert?: weatherTypesUpsertWithoutEventsInput
    connect?: weatherTypesWhereUniqueInput
    update?: XOR<XOR<weatherTypesUpdateToOneWithWhereWithoutEventsInput, weatherTypesUpdateWithoutEventsInput>, weatherTypesUncheckedUpdateWithoutEventsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EventCreateWithoutStationInput = {
    date: Date | string
    weatherTypes: weatherTypesCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateWithoutStationInput = {
    id?: number
    weatherId: number
    date: Date | string
  }

  export type EventCreateOrConnectWithoutStationInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutStationInput, EventUncheckedCreateWithoutStationInput>
  }

  export type EventCreateManyStationInputEnvelope = {
    data: EventCreateManyStationInput | EventCreateManyStationInput[]
    skipDuplicates?: boolean
  }

  export type MeasurmentCreateWithoutStationInput = {
    measurementType: string
  }

  export type MeasurmentUncheckedCreateWithoutStationInput = {
    id?: number
    measurementType: string
  }

  export type MeasurmentCreateOrConnectWithoutStationInput = {
    where: MeasurmentWhereUniqueInput
    create: XOR<MeasurmentCreateWithoutStationInput, MeasurmentUncheckedCreateWithoutStationInput>
  }

  export type MeasurmentCreateManyStationInputEnvelope = {
    data: MeasurmentCreateManyStationInput | MeasurmentCreateManyStationInput[]
    skipDuplicates?: boolean
  }

  export type RecordCreateWithoutStationInput = {
    recordedAt: Date | string
    temperature?: number | null
    precipitation?: number | null
    humidity?: number | null
  }

  export type RecordUncheckedCreateWithoutStationInput = {
    id?: number
    recordedAt: Date | string
    temperature?: number | null
    precipitation?: number | null
    humidity?: number | null
  }

  export type RecordCreateOrConnectWithoutStationInput = {
    where: RecordWhereUniqueInput
    create: XOR<RecordCreateWithoutStationInput, RecordUncheckedCreateWithoutStationInput>
  }

  export type RecordCreateManyStationInputEnvelope = {
    data: RecordCreateManyStationInput | RecordCreateManyStationInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutStationInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutStationInput, EventUncheckedUpdateWithoutStationInput>
    create: XOR<EventCreateWithoutStationInput, EventUncheckedCreateWithoutStationInput>
  }

  export type EventUpdateWithWhereUniqueWithoutStationInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutStationInput, EventUncheckedUpdateWithoutStationInput>
  }

  export type EventUpdateManyWithWhereWithoutStationInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutStationInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: IntFilter<"Event"> | number
    stationId?: IntFilter<"Event"> | number
    weatherId?: IntFilter<"Event"> | number
    date?: DateTimeFilter<"Event"> | Date | string
  }

  export type MeasurmentUpsertWithWhereUniqueWithoutStationInput = {
    where: MeasurmentWhereUniqueInput
    update: XOR<MeasurmentUpdateWithoutStationInput, MeasurmentUncheckedUpdateWithoutStationInput>
    create: XOR<MeasurmentCreateWithoutStationInput, MeasurmentUncheckedCreateWithoutStationInput>
  }

  export type MeasurmentUpdateWithWhereUniqueWithoutStationInput = {
    where: MeasurmentWhereUniqueInput
    data: XOR<MeasurmentUpdateWithoutStationInput, MeasurmentUncheckedUpdateWithoutStationInput>
  }

  export type MeasurmentUpdateManyWithWhereWithoutStationInput = {
    where: MeasurmentScalarWhereInput
    data: XOR<MeasurmentUpdateManyMutationInput, MeasurmentUncheckedUpdateManyWithoutStationInput>
  }

  export type MeasurmentScalarWhereInput = {
    AND?: MeasurmentScalarWhereInput | MeasurmentScalarWhereInput[]
    OR?: MeasurmentScalarWhereInput[]
    NOT?: MeasurmentScalarWhereInput | MeasurmentScalarWhereInput[]
    id?: IntFilter<"Measurment"> | number
    stationId?: IntFilter<"Measurment"> | number
    measurementType?: StringFilter<"Measurment"> | string
  }

  export type RecordUpsertWithWhereUniqueWithoutStationInput = {
    where: RecordWhereUniqueInput
    update: XOR<RecordUpdateWithoutStationInput, RecordUncheckedUpdateWithoutStationInput>
    create: XOR<RecordCreateWithoutStationInput, RecordUncheckedCreateWithoutStationInput>
  }

  export type RecordUpdateWithWhereUniqueWithoutStationInput = {
    where: RecordWhereUniqueInput
    data: XOR<RecordUpdateWithoutStationInput, RecordUncheckedUpdateWithoutStationInput>
  }

  export type RecordUpdateManyWithWhereWithoutStationInput = {
    where: RecordScalarWhereInput
    data: XOR<RecordUpdateManyMutationInput, RecordUncheckedUpdateManyWithoutStationInput>
  }

  export type RecordScalarWhereInput = {
    AND?: RecordScalarWhereInput | RecordScalarWhereInput[]
    OR?: RecordScalarWhereInput[]
    NOT?: RecordScalarWhereInput | RecordScalarWhereInput[]
    id?: IntFilter<"Record"> | number
    stationId?: IntFilter<"Record"> | number
    recordedAt?: DateTimeFilter<"Record"> | Date | string
    temperature?: FloatNullableFilter<"Record"> | number | null
    precipitation?: FloatNullableFilter<"Record"> | number | null
    humidity?: FloatNullableFilter<"Record"> | number | null
  }

  export type StationCreateWithoutMeasurmentsInput = {
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutStationInput
    weatherRecords?: RecordCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutMeasurmentsInput = {
    id?: number
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutStationInput
    weatherRecords?: RecordUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutMeasurmentsInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutMeasurmentsInput, StationUncheckedCreateWithoutMeasurmentsInput>
  }

  export type StationUpsertWithoutMeasurmentsInput = {
    update: XOR<StationUpdateWithoutMeasurmentsInput, StationUncheckedUpdateWithoutMeasurmentsInput>
    create: XOR<StationCreateWithoutMeasurmentsInput, StationUncheckedCreateWithoutMeasurmentsInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutMeasurmentsInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutMeasurmentsInput, StationUncheckedUpdateWithoutMeasurmentsInput>
  }

  export type StationUpdateWithoutMeasurmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutStationNestedInput
    weatherRecords?: RecordUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutMeasurmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutStationNestedInput
    weatherRecords?: RecordUncheckedUpdateManyWithoutStationNestedInput
  }

  export type StationCreateWithoutWeatherRecordsInput = {
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
    events?: EventCreateNestedManyWithoutStationInput
    measurments?: MeasurmentCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutWeatherRecordsInput = {
    id?: number
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutStationInput
    measurments?: MeasurmentUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutWeatherRecordsInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutWeatherRecordsInput, StationUncheckedCreateWithoutWeatherRecordsInput>
  }

  export type StationUpsertWithoutWeatherRecordsInput = {
    update: XOR<StationUpdateWithoutWeatherRecordsInput, StationUncheckedUpdateWithoutWeatherRecordsInput>
    create: XOR<StationCreateWithoutWeatherRecordsInput, StationUncheckedCreateWithoutWeatherRecordsInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutWeatherRecordsInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutWeatherRecordsInput, StationUncheckedUpdateWithoutWeatherRecordsInput>
  }

  export type StationUpdateWithoutWeatherRecordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutStationNestedInput
    measurments?: MeasurmentUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutWeatherRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutStationNestedInput
    measurments?: MeasurmentUncheckedUpdateManyWithoutStationNestedInput
  }

  export type EventCreateWithoutWeatherTypesInput = {
    date: Date | string
    station: StationCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateWithoutWeatherTypesInput = {
    id?: number
    stationId: number
    date: Date | string
  }

  export type EventCreateOrConnectWithoutWeatherTypesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutWeatherTypesInput, EventUncheckedCreateWithoutWeatherTypesInput>
  }

  export type EventCreateManyWeatherTypesInputEnvelope = {
    data: EventCreateManyWeatherTypesInput | EventCreateManyWeatherTypesInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutWeatherTypesInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutWeatherTypesInput, EventUncheckedUpdateWithoutWeatherTypesInput>
    create: XOR<EventCreateWithoutWeatherTypesInput, EventUncheckedCreateWithoutWeatherTypesInput>
  }

  export type EventUpdateWithWhereUniqueWithoutWeatherTypesInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutWeatherTypesInput, EventUncheckedUpdateWithoutWeatherTypesInput>
  }

  export type EventUpdateManyWithWhereWithoutWeatherTypesInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutWeatherTypesInput>
  }

  export type StationCreateWithoutEventsInput = {
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
    measurments?: MeasurmentCreateNestedManyWithoutStationInput
    weatherRecords?: RecordCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutEventsInput = {
    id?: number
    name: string
    country?: string | null
    state?: string | null
    createdAt?: Date | string
    measurments?: MeasurmentUncheckedCreateNestedManyWithoutStationInput
    weatherRecords?: RecordUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutEventsInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutEventsInput, StationUncheckedCreateWithoutEventsInput>
  }

  export type weatherTypesCreateWithoutEventsInput = {
    typeName: string
  }

  export type weatherTypesUncheckedCreateWithoutEventsInput = {
    id?: number
    typeName: string
  }

  export type weatherTypesCreateOrConnectWithoutEventsInput = {
    where: weatherTypesWhereUniqueInput
    create: XOR<weatherTypesCreateWithoutEventsInput, weatherTypesUncheckedCreateWithoutEventsInput>
  }

  export type StationUpsertWithoutEventsInput = {
    update: XOR<StationUpdateWithoutEventsInput, StationUncheckedUpdateWithoutEventsInput>
    create: XOR<StationCreateWithoutEventsInput, StationUncheckedCreateWithoutEventsInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutEventsInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutEventsInput, StationUncheckedUpdateWithoutEventsInput>
  }

  export type StationUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurments?: MeasurmentUpdateManyWithoutStationNestedInput
    weatherRecords?: RecordUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    measurments?: MeasurmentUncheckedUpdateManyWithoutStationNestedInput
    weatherRecords?: RecordUncheckedUpdateManyWithoutStationNestedInput
  }

  export type weatherTypesUpsertWithoutEventsInput = {
    update: XOR<weatherTypesUpdateWithoutEventsInput, weatherTypesUncheckedUpdateWithoutEventsInput>
    create: XOR<weatherTypesCreateWithoutEventsInput, weatherTypesUncheckedCreateWithoutEventsInput>
    where?: weatherTypesWhereInput
  }

  export type weatherTypesUpdateToOneWithWhereWithoutEventsInput = {
    where?: weatherTypesWhereInput
    data: XOR<weatherTypesUpdateWithoutEventsInput, weatherTypesUncheckedUpdateWithoutEventsInput>
  }

  export type weatherTypesUpdateWithoutEventsInput = {
    typeName?: StringFieldUpdateOperationsInput | string
  }

  export type weatherTypesUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateManyStationInput = {
    id?: number
    weatherId: number
    date: Date | string
  }

  export type MeasurmentCreateManyStationInput = {
    id?: number
    measurementType: string
  }

  export type RecordCreateManyStationInput = {
    id?: number
    recordedAt: Date | string
    temperature?: number | null
    precipitation?: number | null
    humidity?: number | null
  }

  export type EventUpdateWithoutStationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weatherTypes?: weatherTypesUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    weatherId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    weatherId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurmentUpdateWithoutStationInput = {
    measurementType?: StringFieldUpdateOperationsInput | string
  }

  export type MeasurmentUncheckedUpdateWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    measurementType?: StringFieldUpdateOperationsInput | string
  }

  export type MeasurmentUncheckedUpdateManyWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    measurementType?: StringFieldUpdateOperationsInput | string
  }

  export type RecordUpdateWithoutStationInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitation?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RecordUncheckedUpdateWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitation?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RecordUncheckedUpdateManyWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    precipitation?: NullableFloatFieldUpdateOperationsInput | number | null
    humidity?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type EventCreateManyWeatherTypesInput = {
    id?: number
    stationId: number
    date: Date | string
  }

  export type EventUpdateWithoutWeatherTypesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    station?: StationUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutWeatherTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyWithoutWeatherTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StationCountOutputTypeDefaultArgs instead
     */
    export type StationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeatherTypesCountOutputTypeDefaultArgs instead
     */
    export type WeatherTypesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeatherTypesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StationDefaultArgs instead
     */
    export type StationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeasurmentDefaultArgs instead
     */
    export type MeasurmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MeasurmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecordDefaultArgs instead
     */
    export type RecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use weatherTypesDefaultArgs instead
     */
    export type weatherTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = weatherTypesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}